"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
const core_1 = require("@applitools/core");
const spec = __importStar(require("./spec-driver"));
const api_1 = require("./api");
if (!process.env.APPLITOOLS_WEBDRIVERIO_MAJOR_VERSION) {
    try {
        const version = (_a = process.env.APPLITOOLS_WEBDRIVERIO_VERSION) !== null && _a !== void 0 ? _a : require('webdriverio/package.json').version;
        const [major] = version.split('.', 1);
        process.env.APPLITOOLS_WEBDRIVERIO_MAJOR_VERSION = major;
    }
    catch {
        // NOTE: ignore error
    }
}
// TODO have to be removed
const sdk = (0, core_1.makeCore)({
    agentId: `eyes-webdriverio-service/${require('../package.json').version}`,
    spec,
});
class EyesOverride extends api_1.Eyes {
}
EyesOverride._spec = sdk;
class EyesService {
    constructor({ useVisualGrid, concurrency, eyes, ...config }) {
        const wdioMajorVersion = Number(process.env.APPLITOOLS_WEBDRIVERIO_MAJOR_VERSION);
        config = wdioMajorVersion < 6 ? { ...eyes } : config;
        if (!useVisualGrid)
            config.hideScrollbars = true;
        this._eyes = new EyesOverride(useVisualGrid ? new api_1.VisualGridRunner({ testConcurrency: concurrency }) : new api_1.ClassicRunner(), config);
    }
    async _eyesOpen() {
        if (!this._eyes.isOpen) {
            this._testResults = undefined;
            await this._eyes.open(browser);
        }
    }
    async _eyesClose() {
        if (this._eyes.isOpen) {
            this._testResults = await this._eyes.close(false);
        }
    }
    beforeSession(config) {
        this._appName = this._eyes.configuration.appName;
        if (config.enableEyesLogs) {
            this._eyes.setLogHandler({ type: 'console' });
        }
    }
    before() {
        browser.addCommand('getEyes', () => {
            return this._eyes;
        });
        browser.addCommand('eyesCheck', async (title, checkSettings = { fully: true }) => {
            await this._eyesOpen();
            return this._eyes.check(title, checkSettings);
        });
        // deprecated, alias of eyesCheck
        browser.addCommand('eyesCheckWindow', async (...args) => {
            return browser.eyesCheck(...args);
        });
        browser.addCommand('eyesSetScrollRootElement', (element) => {
            this._eyes.getConfiguration().setScrollRootElement(element);
        });
        browser.addCommand('eyesAddProperty', (key, value) => {
            this._eyes.getConfiguration().addProperty(key, value);
        });
        browser.addCommand('eyesClearProperties', () => {
            this._eyes.getConfiguration().clearProperties();
        });
        browser.addCommand('eyesGetTestResults', async () => {
            // because `afterTest` executes after `afterEach`, this is the way to get results in `afterEach` or `it`
            await this._eyesClose();
            return this._testResults;
        });
        browser.addCommand('eyesSetConfiguration', (configuration) => {
            return this._eyes.setConfiguration(configuration);
        });
        browser.addCommand('eyesGetIsOpen', () => {
            return this._eyes.getIsOpen();
        });
        browser.addCommand('eyesGetConfiguration', () => {
            return this._eyes.getConfiguration();
        });
        browser.addCommand('eyesGetAllTestResults', async (throwErr) => {
            return this._eyes.runner.getAllTestResults(throwErr);
        });
    }
    beforeTest(test) {
        var _a, _b, _c;
        const configuration = this._eyes.getConfiguration();
        configuration.setTestName((_a = test.title) !== null && _a !== void 0 ? _a : test.description); // test.title is for mocha, and test.description is for jasmine
        if (!this._appName) {
            configuration.setAppName((_b = test.parent) !== null && _b !== void 0 ? _b : (_c = test.fullName) === null || _c === void 0 ? void 0 : _c.replace(` ${test.description}`, '')); // test.parent is for mocha, and test.id is for jasmine
        }
        if (!configuration.getViewportSize()) {
            configuration.setViewportSize({ width: 800, height: 600 });
        }
        this._eyes.setConfiguration(configuration);
    }
    async afterTest() {
        // the next line is required because if we set an element in one test, then the following test
        // will say that the element is not attached to the page (because different browsers are used)
        this._eyes.getConfiguration().setScrollRootElement(null);
        await this._eyesClose();
    }
    async after() {
        await this._eyes.runner.getAllTestResults(false);
        await this._eyes.abort();
    }
}
module.exports = EyesService;
